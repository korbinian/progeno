//  MIXINS
////////////////////////////////////////////////////////////////////////////////
@mixin clearfix() {
    &:before,
    &:after {
        display: table;
        content: "";
    }
    &:after {
        clear: both;
    }
}

@mixin visuallyhidden() {
    position: absolute;
    overflow: hidden;
    clip: rect(0 0 0 0);
    clip: rect(0, 0, 0, 0);
    width: 1px;
    height: 1px;
    margin: -1px;
    padding: 0;
}

@mixin hidden() {
    display: none !important;
}

/// poly-fluid-sizing
/// Generate linear interpolated size values through multiple break points
/// @param $property - A string CSS property name
/// @param $map - A SASS map of viewport unit and size value pairs
/// @requires function linear-interpolation
/// @requires function map-sort
/// @example
///   @include poly-fluid-sizing('font-size', (576px: 22px, 768px: 24px, 992px: 34px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@mixin poly-fluid-sizing($property, $map) {
    // Get the number of provided breakpoints
    $length: length(map-keys($map)); // Error if the number of breakpoints is < 2
    @if ($length < 2) {
        @error "poly-fluid-sizing() $map requires at least values";
    } // Sort the map by viewport width (key)
    $map: map-sort($map);
    $keys: map-keys($map); // Minimum size
    #{$property}: map-get($map, nth($keys, 1)); // Interpolated size through breakpoints
    @for $i from 1 through ($length - 1) {
        @media (min-width: nth($keys, $i)) {
            #{$property}: linear-interpolation(
                (
                    nth($keys, $i): map-get($map, nth($keys, $i)),
                    nth($keys, ($i + 1)): map-get($map, nth($keys, ($i + 1)))
                )
            );
        }
    } // Maxmimum size
    @media (min-width: nth($keys, $length)) {
        #{$property}: map-get($map, nth($keys, $length));
    }
}

/// linear-interpolation
/// Calculate the definition of a line between two points
/// @param $map - A SASS map of viewport widths and size value pairs
/// @returns A linear equation as a calc() function
/// @example
///   font-size: linear-interpolation((320px: 18px, 768px: 26px));
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function linear-interpolation($map) {
    $keys: map-keys($map);
    @if (length($keys) !=2) {
        @error "linear-interpolation() $map must be exactly 2 values";
    } // The slope
    $m: (map-get($map, nth($keys, 2)) - map-get($map, nth($keys, 1)))/ (nth($keys, 2) - nth($keys, 1)); // The y-intercept
    $b: map-get($map, nth($keys, 1)) - $m * nth($keys, 1); // Determine if the sign should be positive or negative
    $sign: "+";
    @if ($b < 0) {
        $sign: "-";
        $b: abs($b);
    }
    @return calc(#{$m * 100}vw #{$sign} #{$b});
}

/// list-sort
/// Sort a SASS list
/// @param $list - A SASS list
/// @returns A sorted SASS list
/// @requires function list-remove
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-sort($list) {
    $sortedlist: ();
    @while length($list) >0 {
        $value: nth($list, 1);
        @each $item in $list {
            @if $item < $value {
                $value: $item;
            }
        }
        $sortedlist: append($sortedlist, $value, "space");
        $list: list-remove($list, index($list, $value));
    }
    @return $sortedlist;
}

/// map-sort
/// Sort map by keys
/// @param $map - A SASS map
/// @returns A SASS map sorted by keys
/// @requires function list-sort
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function map-sort($map) {
    $keys: list-sort(map-keys($map));
    $sortedMap: ();
    @each $key in $keys {
        $sortedMap: map-merge(
            $sortedMap,
            (
                $key: map-get($map, $key)
            )
        );
    }
    @return $sortedMap;
}

/// list-remove
/// Remove an item from a list
/// @param $list - A SASS list
/// @param $index - The list index to remove
/// @returns A SASS list
/// @author Jake Wilson <jake.e.wilson@gmail.com>
@function list-remove($list, $index) {
    $newList: ();
    @for $i from 1 through length($list) {
        @if $i !=$index {
            $newList: append($newList, nth($list, $i), "space");
        }
    }
    @return $newList;
}

@mixin text-display-m {
    font-family: $font-stack-exo2;
    font-size: $font-size-m;
    line-height: 1.25rem;
    font-weight: 600;
    margin-bottom: $spacing-m;
    a {
        text-decoration: none;
        background-image: linear-gradient(to top, currentColor, currentColor 0.1rem, transparent 0.1rem);
        &:hover {
            color: $black;
            background-image: linear-gradient(to top, $black, $black 0.1rem, transparent 0.1rem);
        }
    }
}

@mixin text-display-l {
    font-family: $font-stack-exo2;
    font-size: $font-size-l;
    line-height: 1.25rem;
    font-weight: 600;
    margin-bottom: $spacing-m;
    a {
        text-decoration: none;
        background-image: linear-gradient(to top, currentColor, currentColor 0.15rem, transparent 0.15rem);
        &:hover {
            color: $black;
            background-image: linear-gradient(to top, $black, $black 0.15rem, transparent 0.15rem);
        }
    }
}

@mixin text-display-xl {
    font-family: $font-stack-exo2;
    font-size: $font-size-xl;
    font-weight: 700;
    line-height: 1;
    margin-bottom: $spacing-m;
    a {
        text-decoration: none;
        background-image: linear-gradient(to top, currentColor, currentColor 0.25rem, transparent 0.25rem);
        &:hover {
            color: $black;
            background-image: linear-gradient(to top, $black, $black 0.25rem, transparent 0.25rem);
        }
    }
    @media (max-width: 540px) {
        font-size: $font-size-l;
    }
}

@mixin text-display-xxl {
    font-family: $font-stack-exo2;
    font-size: $font-size-xxl;
    font-weight: 800;
    line-height: 1;
    margin-bottom: $spacing-m;
    a {
        text-decoration: none;
        background-image: linear-gradient(to top, currentColor, currentColor 0.5rem, transparent 0.5rem);
        &:hover {
            color: $black;
            background-image: linear-gradient(to top, $black, $black 0.5rem, transparent 0.5rem);
        }
    }
    @media (max-width: 540px) {
        font-size: $font-size-xl;
    }
}

@mixin text-copy-s {
    font-family: $font-stack-copy;
    font-size: $font-size-s;
    font-weight: 400;
    line-height: 1.25rem;
}

@mixin text-copy-l {
    font-family: $font-stack-copy;
    font-size: $font-size-l;
    font-weight: 400;
}

@mixin slab-green {
    background: $progeno-green;
    color: darken($progeno-green, 35%);
}

@mixin slab-orange {
    background: $progeno-orange;
    color: darken($progeno-orange, 35%);
}
